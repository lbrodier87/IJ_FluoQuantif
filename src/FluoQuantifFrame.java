import ij.Prefs;
import ij.plugin.Duplicator;
import ij.plugin.ZProjector;
import ij.plugin.frame.RoiManager;
import java.io.File;
import ij.IJ;
import ij.ImagePlus;
import ij.gui.Roi;
import ij.measure.ResultsTable;
import ij.plugin.filter.ParticleAnalyzer;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JFileChooser;
import loci.plugins.BF;

/**
 * Quantify fluorescence using mask or square on images
 * @author Laurent
 * @version 1.1.2 30.07.2018
 */
public class FluoQuantifFrame extends javax.swing.JFrame {
    //class constructor with custom init values
    public FluoQuantifFrame() {
        initComponents();
        jfc.setCurrentDirectory(new File("E:\\QUANTIF")); //default starting directory
        String [] threshold = {"Default dark", "Huang dark", "*Intermodes dark", "IsoData dark", "IJ_IsoData dark", "Li dark", "*MaxEntropy dark", "Mean dark", "MinError dark", "*Minimum dark", "Moments dark", "Otsu dark", "Percentile dark", "*RenyiEntropy dark", "*Shanbhag dark", "Triangle dark", "*Yen dark"};
        jComboBox1.setModel(new DefaultComboBoxModel(threshold));
        jComboBox1.setSelectedIndex(jComboBox1.getItemCount()-1); //default value is Yen dark
    }
    
    //global variables
    JFileChooser jfc = new JFileChooser();  

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField6 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jButton5 = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jTextField2 = new javax.swing.JTextField();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel5 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jCheckBox2 = new javax.swing.JCheckBox();
        jTextField4 = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jCheckBox4 = new javax.swing.JCheckBox();
        jTextField9 = new javax.swing.JTextField();

        jTextField6.setText("jTextField6");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("FluoQuantif LB");

        jButton1.setText("process current img");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("process all img in folder");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        jButton4.setText("reset file list");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton3.setText("process next");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jLabel1.setText("...");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton3))
                    .addComponent(jLabel1))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton4)
                    .addComponent(jButton3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jButton5.setText("show formatted results");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("threshold method");

        jTextField1.setText("3");
        jTextField1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField1ActionPerformed(evt);
            }
        });

        jLabel3.setText("mask channel: ");

        jLabel4.setText("group by");

        jTextField2.setText("4");

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("square around mask");

        jLabel5.setText("size");

        jTextField3.setText("25");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });

        jCheckBox2.setText("recenter");

        jTextField4.setText("0");

        jLabel6.setText("offset");

        jLabel7.setText("min");

        jTextField5.setText("35");

        jLabel8.setText("max");

        jTextField7.setText("none");

        jCheckBox3.setText("rect: analyze max, process sum");
        jCheckBox3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox3ActionPerformed(evt);
            }
        });

        jLabel9.setText("Quantify channels: ");

        jTextField8.setText("2,3");

        jCheckBox4.setText("background outside");

        jTextField9.setText("1");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jButton2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 252, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel4)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jCheckBox1)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel5)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(30, 30, 30)
                                    .addComponent(jCheckBox2)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(jLabel6)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel7)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGap(18, 18, 18)
                                    .addComponent(jLabel8)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 51, Short.MAX_VALUE)
                                    .addComponent(jCheckBox3))))
                        .addGap(10, 10, 10))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCheckBox4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField9)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButton2))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel4)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCheckBox1)
                    .addComponent(jLabel5)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox2)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8)
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jCheckBox4)
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    //Process a single image opened in imageJ
    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        ImagePlus imp = ij.WindowManager.getCurrentImage();
        if(jCheckBox1.isSelected()){ //if true use square around masks (default)
            if(jCheckBox3.isSelected()){ 
                processRect_fu(imp); //special feature to get mask from max, and quantify on sum with rectangles
            }else{
                processRect(imp); //DEFAULT
            }
        }else{
            process(imp); //no rectangle around mask
        }        
    }//GEN-LAST:event_jButton1ActionPerformed

    //process a whole folder at once     
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(jfc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = jfc.getSelectedFile();
            processFolder(f.getPath()); //function to process all folder
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    //Process all images of a directory one by one at each click. File list set in button4. 
    int nextindex = -1; //if negatif, filelist not set    
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        if(nextindex >= 0){
            try{
                ImagePlus[] imp = BF.openImagePlus(filelist[nextindex].getPath()); //open image using bioformat plugin (loci tools)
                if(jCheckBox1.isSelected()){
                    if(jCheckBox3.isSelected()){
                        processRect_fu(imp[0]);
                    }else{
                        processRect(imp[0]);
                    } 
                }else{
                    process(imp[0]);
                }
                
            }catch(java.lang.Exception e){
                IJ.log("error processing image " + (nextindex+1) + "/" + filelist.length + " -> " + e.getMessage());
            } 
            nextindex++;
            if(nextindex < filelist.length){            
                jLabel1.setText("Next file: " + (nextindex+1) + "/" + filelist.length);
            }else{
                jLabel1.setText("processed all " + filelist.length + "/" + filelist.length + " files");
                nextindex = -1;
            }
        }else{
            jLabel1.setText("reset/set file list first...");
        }
    }//GEN-LAST:event_jButton3ActionPerformed
    //list all files in directory for processing one by one using button3
    File filelist[] = null;
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        jfc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        if(jfc.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            File f = jfc.getSelectedFile();
            filelist = listFiles(f.getPath());
            nextindex = 0;
            jLabel1.setText("Next file: " + (nextindex+1) + "/" + filelist.length);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    ResultConverter RC = new ResultConverter();
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        RC.setVisible(true);
        ResultsTable rt = ResultsTable.getResultsTable();
        float values[] = rt.getColumn(rt.getColumnIndex("Mean"));
        String out = "";
        for(float f : values){
            out += f + "\n";
        }
        RC.setText(out);
        RC.convert(Integer.parseInt(jTextField2.getText()));
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField1ActionPerformed
    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jCheckBox3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox3ActionPerformed
    
    //list all files in directory
    public File[] listFiles(String path){
        File folder = new File(path);
        File[] listOfFiles = folder.listFiles();        
        return listOfFiles;
    }    
        
    //automatically process a whole folder
    public void processFolder(String path){
        File[] files = listFiles(path);                
        for(File f : files){
            try{
                ImagePlus[] imp = BF.openImagePlus(f.getPath()); 
                if(jCheckBox1.isSelected()){
                    if(jCheckBox3.isSelected()){
                        processRect_fu(imp[0]);
                    }else{
                        processRect(imp[0]);
                    }
                }else{
                    process(imp[0]);
                }                               
            }catch(java.lang.Exception e){
                System.err.println(f.getPath() + " -> " + e.getMessage());
            }            
        }
    }
    
    public int[] getQuantifyChannels(){
        int c[];
        try{
            String s = jTextField8.getText();
            String s2[] = s.split(",");
            c = new int[s2.length];
            for(int i=0; i<c.length; i++){
                c[i] = Integer.parseInt(s2[i]);
            }
        }catch(java.lang.Exception e){
            c = new int[2];
            c[0] = 2;
            c[1] = 3;
            System.err.println("✘ Error parsing channels to quantify: values have been set to default 2 and 3...");
        }
        return c;
    }
    
    //MAIN PROCESS FUNCTION!!!
    String mask = "Intermodes dark";
    public void process(ImagePlus imp){
        mask = jComboBox1.getSelectedItem().toString();
        mask = mask.replace("*", "");
        RoiManager rm = RoiManager.getInstance();
        if (rm==null){
            rm = new RoiManager();
            rm.setVisible(true);
        }else{
            while(rm.getCount()>0){ //delete ROIS in roi manager
                rm.select(0);
                rm.runCommand("Delete");
            }
        }

        ImagePlus imp2_sum = ZProjector.run(imp,"sum");
        imp2_sum.show();        
               
        int m = Integer.parseInt(jTextField1.getText());
        ImagePlus imp_mask = new Duplicator().run(imp2_sum, m, m, 1, 1, 1, 1);
        imp_mask.show();
        imp_mask.setTitle(imp2_sum.getTitle() + " - ch" + m + " mask_" + mask);
        //ij.WindowManager.setCurrentWindow(imp_mask.getWindow());     
        IJ.setAutoThreshold(imp_mask, mask);
        Prefs.blackBackground = false;
        IJ.run(imp_mask, "Convert to Mask", ""); 
         
        
        ParticleAnalyzer.setRoiManager(rm);        
        ij.measure.ResultsTable rt = new ij.measure.ResultsTable();
        ParticleAnalyzer.setResultsTable(rt);
        
        double min = 35, max = Double.MAX_VALUE;
        try{
            if(Double.parseDouble(jTextField5.getText()) >= 0){
                min = Double.parseDouble(jTextField5.getText());
            }
        }catch(java.lang.Exception e){}
        try{
            if(Double.parseDouble(jTextField6.getText()) >= 0){
                max = Double.parseDouble(jTextField6.getText());
            }
        }catch(java.lang.Exception e){}
        
        ij.plugin.filter.ParticleAnalyzer pa = new ij.plugin.filter.ParticleAnalyzer(
                    ParticleAnalyzer.ADD_TO_MANAGER+ParticleAnalyzer.SHOW_NONE, 
                    ParticleAnalyzer.MEAN+ParticleAnalyzer.MIN_MAX, rt, min, max);  //min and max size, can also add min and max circularity 
        pa.analyze(imp_mask);                                           
        
        
        //ij.WindowManager.setCurrentWindow(imp2_sum.getWindow());
        imp2_sum.setDisplayMode(IJ.COLOR);

        //NEW CODE for interactive selection of channels to quantify
        int c[] = getQuantifyChannels();
        
        
        if(rm.getCount() == 2){ 
            for(int i=0; i<c.length; i++){
                rm.select(0);            
                imp2_sum.setC(c[i]);
                rm.runCommand(imp2_sum, "Measure");
            }
            for(int i=0; i<c.length; i++){
                rm.select(1);            
                imp2_sum.setC(c[i]);
                rm.runCommand(imp2_sum, "Measure");
            }            
        }else{
            IJ.log("✘ " + rm.getCount() + " rois in image " + imp2_sum.getTitle());             
        }
                   
        //get rois and add overlay // improved to display all even if rois count != 2       
        Roi rois[] = rm.getRoisAsArray();
        try{
            ij.gui.Overlay ovl = new ij.gui.Overlay(rois[0]);
            for(int i=1; i<rois.length; i++){
                ovl.add(rois[i]);
            }
            imp2_sum.setOverlay(ovl); 
        }catch(java.lang.Exception e){}
                      
        //display...   must be edited for multi channel...     
        imp2_sum.setC(1);
        IJ.run(imp2_sum, "Blue", "");
        imp2_sum.setC(c[0]);
        IJ.run(imp2_sum, "Green", "");
        imp2_sum.setC(c[1]);
        IJ.run(imp2_sum, "Red", "");       
        imp2_sum.setDisplayMode(IJ.COMPOSITE);                        
        imp2_sum.setActiveChannels("111"); //edit to show channels 011
        
        //close images        
        imp_mask.close();          
    } 
    
    //DEFAULT - mask on sum, quantify on sum, use retangular ROIS around mask
    public void processRect(ImagePlus imp){
        //set the mask
        mask = jComboBox1.getSelectedItem().toString();
        mask = mask.replace("*", "");
        
        //initialize ROI manager
        RoiManager rm = RoiManager.getInstance();
        if (rm==null){
            rm = new RoiManager();
            rm.setVisible(true);
        }else{
            while(rm.getCount()>0){ //delete ROIS in roi manager
                rm.select(0);
                rm.runCommand("Delete");
            }
        }

        //creates a sum projection: imp2_sum
        ImagePlus imp2_sum = ZProjector.run(imp,"sum");
        imp2_sum.show();
        
        //masks the image and create a mask: imp_mask      
        int m = Integer.parseInt(jTextField1.getText()); //m is the channel to use for mask
        ImagePlus imp_mask = new Duplicator().run(imp2_sum, m, m, 1, 1, 1, 1);
        imp_mask.show();
        imp_mask.setTitle(imp2_sum.getTitle() + " - ch" + m + " mask_" + mask);            
        IJ.setAutoThreshold(imp_mask, mask);
        Prefs.blackBackground = false;
        IJ.run(imp_mask, "Convert to Mask", ""); 
         
        //set min and max values to limit ROI size
        double min = 35, max = Double.MAX_VALUE; 
        try{
            if(Double.parseDouble(jTextField5.getText()) >= 0){
                min = Double.parseDouble(jTextField5.getText());
            }
        }catch(java.lang.Exception e){}
        try{
            if(Double.parseDouble(jTextField6.getText()) >= 0){
                max = Double.parseDouble(jTextField6.getText());
            }
        }catch(java.lang.Exception e){}
        
        //run particle analyzer on mask: we get ROIs in RoiManager
        ParticleAnalyzer.setRoiManager(rm);        
        ij.measure.ResultsTable rt = new ij.measure.ResultsTable();
        ParticleAnalyzer.setResultsTable(rt);
        ij.plugin.filter.ParticleAnalyzer pa = new ij.plugin.filter.ParticleAnalyzer(
                    ParticleAnalyzer.ADD_TO_MANAGER+ParticleAnalyzer.SHOW_NONE, 
                    ParticleAnalyzer.SHOW_NONE, rt, min, max);  //min and max size, can also add min and max circularity 
        //ParticleAnalyzer(int options, int measurements, ResultsTable rt, double minSize, double maxSize, [optional]double minCirc, [optional]double maxCirc)
        pa.analyze(imp_mask);   
        
                
        //set the correct display mode for subsequent measures
        imp2_sum.setDisplayMode(IJ.COLOR);
        
        //NEW CODE for interactive selection of channels to quantify
        int c[] = getQuantifyChannels();

        //if 2 ROIS in RM: continue process, otherwise abort. 
        if(rm.getCount() == 2){
            //construct squares from center of ROIS and with user defined width
            Roi r01 = rm.getRoi(0);
            Roi r02 = rm.getRoi(1);

            int width = Integer.parseInt(jTextField3.getText());
            int height = Integer.parseInt(jTextField3.getText());
            Roi r1 = new ij.gui.Roi((r01.getBounds().x + (double)r01.getBounds().width/2) - (double)width/2, (r01.getBounds().y + (double)r01.getBounds().height/2) - (double)height/2, width, height);
            Roi r2 = new ij.gui.Roi((r02.getBounds().x + (double)r02.getBounds().width/2) - (double)width/2, (r02.getBounds().y + (double)r02.getBounds().height/2) - (double)height/2, width, height);
        
            //if the user wants to offset the rectangle, update r1 and r2
            if(jCheckBox2.isSelected()){
                int x1, x2, y1, y2;
                int offset = Integer.parseInt(jTextField4.getText());
                
                double distancex = (Math.abs((r01.getBounds().x + (double)r01.getBounds().width/2) - (r02.getBounds().x + (double)r02.getBounds().width/2)));
                double distancey = (Math.abs((r01.getBounds().y + (double)r01.getBounds().height/2) - (r02.getBounds().y + (double)r02.getBounds().height/2)));
                double angle = Math.atan(distancey/distancex);
                double offsetX = offset * Math.cos(angle);
                double offsetY = offset * Math.sin(angle);
                
                if(r1.getBounds().x > r2.getBounds().x){ //r1.x > r2.x >> move left
                    x1 = r1.getBounds().x  + (int)(offsetX);
                    x2 = r2.getBounds().x - (int)(offsetX);
                }else{
                    x1 = r1.getBounds().x - (int)(offsetX);
                    x2 = r2.getBounds().x + (int)(offsetX);
                }
                
                if(r1.getBounds().y > r2.getBounds().y){
                    y1 = r1.getBounds().y + (int)(offsetY);
                    y2 = r2.getBounds().y - (int)(offsetY);
                }else{
                    y1 = r1.getBounds().y - (int)(offsetY);
                    y2 = r2.getBounds().y + (int)(offsetY);
                }
                r1 = new ij.gui.Roi(x1, y1, width, height);
                r2 = new ij.gui.Roi(x2, y2, width, height);
            }
            
            //update ROIS in ROI manager (replace with rectangles)
            rm.select(0);
            rm.runCommand("Delete");
            rm.select(0);
            rm.runCommand("Delete");            
            rm.addRoi(r1);
            rm.addRoi(r2);
            
            //mesure chaque canal pour le ROI1 puis pour le ROI2
            for(int i=0; i<c.length; i++){
                rm.select(0);            
                imp2_sum.setC(c[i]);
                rm.runCommand(imp2_sum, "Measure");
            }
            for(int i=0; i<c.length; i++){
                rm.select(1);            
                imp2_sum.setC(c[i]);
                rm.runCommand(imp2_sum, "Measure");
            }
            
            //Add a new square in the middle of r1 and r2 to measure background at center            
            if(!jCheckBox4.isSelected()){
                //ORIGINAL
                Roi r3 = new ij.gui.Roi((double)(r1.getBounds().x + r2.getBounds().x)/2, (double)(r1.getBounds().y + r2.getBounds().y)/2, width, height);
                rm.addRoi(r3);
            }else{
                double dx = r2.getBounds().x - r1.getBounds().x;
                double dy = r2.getBounds().y - r1.getBounds().y;
                double angle = Math.atan(dy/dx);
                //double d = Double.parseDouble(jTextField9.getText()) * (width+height)/2;
                double d = (2*Math.sqrt(((double)width/2)*((double)width/2)+((double)height/2)*((double)height/2)))*Double.parseDouble(jTextField9.getText());
                
                if(dy>=0) dy = Math.abs(Math.sin(angle)) * d;
                else dy = Math.abs(Math.sin(angle)) * -d;
                if(dx>=0) dx = Math.abs(Math.cos(angle)) * d;  
                else dx = Math.abs(Math.cos(angle)) * -d;
                
                double px1 = (double)r2.getBounds().x + (double)width/2;
                double py1= (double)r2.getBounds().y  + (double)width/2;
                Roi r3 = new ij.gui.Roi(px1 +dx -(double)width/2, py1 +dy -(double)height/2, width, height);
                rm.addRoi(r3);
            }
            //measure background for each channel
            for(int i=0; i<c.length; i++){
                rm.select(2);            
                imp2_sum.setC(c[i]);
                rm.runCommand(imp2_sum, "Measure");
            }
        }else{
            IJ.log("✘ " + rm.getCount() + " rois in image " + imp2_sum.getTitle());
        }
                   
        //get rois and add overlay // also work if rois count != 2 (for visual debug)
        Roi rois[] = rm.getRoisAsArray();
        try{
            ij.gui.Overlay ovl = new ij.gui.Overlay(rois[0]);
            for(int i=1; i<rois.length; i++){
                ovl.add(rois[i]);
            }
            imp2_sum.setOverlay(ovl); 
        }catch(java.lang.Exception e){}
                   
        
        if(imp2_sum.getNChannels() == 4){
            imp2_sum.setC(2);
            IJ.run(imp2_sum, "Blue", ""); //WDR + DNA (GFP)
            imp2_sum.setC(c[0]);
            IJ.run(imp2_sum, "Green", ""); //KAT (red)
            imp2_sum.setC(c[1]);
            IJ.run(imp2_sum, "Red", ""); // pericentrin far red     
            imp2_sum.setDisplayMode(IJ.COMPOSITE);                        
            imp2_sum.setActiveChannels("0111"); //edit to show channels 011
        }else{
            //display... must be updated to use 4 channels image!  (original)    
            imp2_sum.setC(1);
            IJ.run(imp2_sum, "Blue", ""); //DNA
            imp2_sum.setC(2);
            IJ.run(imp2_sum, "Green", ""); //WDR62
            imp2_sum.setC(3);
            IJ.run(imp2_sum, "Red", ""); // pericentrin? kat?      
            imp2_sum.setDisplayMode(IJ.COMPOSITE);                        
            imp2_sum.setActiveChannels("111"); //edit to show channels 011
        }
        
        //close images        
        imp_mask.close(); //close mask  
        //IJ.run("Tile", "");
    } 
    
    //NOT USED -> to mask on max and process on sum... 
    public void processRect_fu(ImagePlus imp){
        mask = jComboBox1.getSelectedItem().toString();
        mask = mask.replace("*", "");
        RoiManager rm = RoiManager.getInstance();
        if (rm==null){
            rm = new RoiManager();
            rm.setVisible(true);
        }else{
            while(rm.getCount()>0){ //delete ROIS in roi manager
                rm.select(0);
                rm.runCommand("Delete");
            }
        }

        ImagePlus imp2_sum = ZProjector.run(imp,"sum");
        imp2_sum.show();
        
        ImagePlus imp2_max = ZProjector.run(imp, "max");
        imp2_max.show();
        //ij.WindowManager.setCurrentWindow(imp2_sum.getWindow());
               
        int m = Integer.parseInt(jTextField1.getText());
        ImagePlus imp_mask = new Duplicator().run(imp2_max, m, m, 1, 1, 1, 1);
        imp_mask.show();
        imp_mask.setTitle(imp2_max.getTitle() + " - ch" + m + " mask_" + mask);
        //ij.WindowManager.setCurrentWindow(imp_mask.getWindow());     
        IJ.setAutoThreshold(imp_mask, mask);
        Prefs.blackBackground = false;
        IJ.run(imp_mask, "Convert to Mask", ""); 
         
        double min = 35, max = Double.MAX_VALUE;
        try{
            if(Double.parseDouble(jTextField5.getText()) >= 0){
                min = Double.parseDouble(jTextField5.getText());
            }
        }catch(java.lang.Exception e){}
        try{
            if(Double.parseDouble(jTextField6.getText()) >= 0){
                max = Double.parseDouble(jTextField6.getText());
            }
        }catch(java.lang.Exception e){}
        
        ParticleAnalyzer.setRoiManager(rm);        
        ij.measure.ResultsTable rt = new ij.measure.ResultsTable();
        ParticleAnalyzer.setResultsTable(rt);
        ij.plugin.filter.ParticleAnalyzer pa = new ij.plugin.filter.ParticleAnalyzer(
                    ParticleAnalyzer.ADD_TO_MANAGER+ParticleAnalyzer.SHOW_NONE, 
                    ParticleAnalyzer.SHOW_NONE, rt, min, max);  //min and max size, can also add min and max circularity 
                                                                                                //ParticleAnalyzer(int options, int measurements, ResultsTable rt, double minSize, double maxSize, [optional]double minCirc, [optional]double maxCirc)
        pa.analyze(imp_mask);   
        
                
        //ij.WindowManager.setCurrentWindow(imp2_sum.getWindow());
        imp2_sum.setDisplayMode(IJ.COLOR);

        //NEW CODE for interactive selection of channels to quantify
        int c[] = getQuantifyChannels();
        
        if(rm.getCount() == 2){
            Roi r01 = rm.getRoi(0);
            Roi r02 = rm.getRoi(1);

            int width = Integer.parseInt(jTextField3.getText());
            int height = Integer.parseInt(jTextField3.getText());
            Roi r1 = new ij.gui.Roi((r01.getBounds().x + (double)r01.getBounds().width/2) - (double)width/2, (r01.getBounds().y + (double)r01.getBounds().height/2) - (double)height/2, width, height);
            Roi r2 = new ij.gui.Roi((r02.getBounds().x + (double)r02.getBounds().width/2) - (double)width/2, (r02.getBounds().y + (double)r02.getBounds().height/2) - (double)height/2, width, height);
        
            if(jCheckBox2.isSelected()){
                int x1, x2, y1, y2;
                int offset = Integer.parseInt(jTextField4.getText());
                if(r1.getBounds().x > r2.getBounds().x){ //r1.x > r2.x >> move left
                    x1 = r01.getBounds().x + r01.getBounds().width - r1.getBounds().width +offset;
                    x2 = r02.getBounds().x -offset;
                }else{
                    x1 = r01.getBounds().x -offset;
                    x2 = r02.getBounds().x + r02.getBounds().width - r2.getBounds().width +offset;
                }
                
                if(r1.getBounds().y > r2.getBounds().y){
                    y1 = r01.getBounds().y + r01.getBounds().height - r1.getBounds().height +offset;
                    y2 = r02.getBounds().y -offset;
                }else{
                    y1 = r01.getBounds().y -offset;
                    y2 = r02.getBounds().y + r02.getBounds().height - r2.getBounds().height +offset;
                }
                r1 = new ij.gui.Roi(x1, y1, width, height);
                r2 = new ij.gui.Roi(x2, y2, width, height);
            }
            
            rm.select(0);
            rm.runCommand("Delete");
            rm.select(0);
            rm.runCommand("Delete");
            
            rm.addRoi(r1);
            rm.addRoi(r2);
            
            for(int i=0; i<c.length; i++){
                rm.select(0);            
                imp2_sum.setC(c[i]);
                rm.runCommand(imp2_sum, "Measure");
            }

            for(int i=0; i<c.length; i++){
                rm.select(1);            
                imp2_sum.setC(c[i]);
                rm.runCommand(imp2_sum, "Measure");
            }
            
            //background
            if(!jCheckBox4.isSelected()){
                //ORIGINAL
                Roi r3 = new ij.gui.Roi((double)(r1.getBounds().x + r2.getBounds().x)/2, (double)(r1.getBounds().y + r2.getBounds().y)/2, width, height);
                rm.addRoi(r3);
            }else{
                double dx = r2.getBounds().x - r1.getBounds().x;
                double dy = r2.getBounds().y - r1.getBounds().y;
                double angle = Math.atan(dy/dx);
                //double d = Double.parseDouble(jTextField9.getText()) * (width+height)/2;
                double d = (2*Math.sqrt(((double)width/2)*((double)width/2)+((double)height/2)*((double)height/2)))*Double.parseDouble(jTextField9.getText());
                
                if(dy>=0) dy = Math.abs(Math.sin(angle)) * d;
                else dy = Math.abs(Math.sin(angle)) * -d;
                if(dx>=0) dx = Math.abs(Math.cos(angle)) * d;  
                else dx = Math.abs(Math.cos(angle)) * -d;
                
                double px1 = (double)r2.getBounds().x + (double)width/2;
                double py1= (double)r2.getBounds().y  + (double)width/2;
                Roi r3 = new ij.gui.Roi(px1 +dx -(double)width/2, py1 +dy -(double)height/2, width, height);
                rm.addRoi(r3);
            }
            for(int i=0; i<c.length; i++){
                rm.select(2);            
                imp2_sum.setC(c[i]);
                rm.runCommand(imp2_sum, "Measure");
            }
        }else{
            IJ.log("✘ " + rm.getCount() + " rois in image " + imp2_sum.getTitle());
        }
                   
        //get rois and add overlay // also work it rois count != 2 (for visual debug)
        Roi rois[] = rm.getRoisAsArray();
        try{
            ij.gui.Overlay ovl = new ij.gui.Overlay(rois[0]);
            for(int i=1; i<rois.length; i++){
                ovl.add(rois[i]);
            }
            imp2_sum.setOverlay(ovl); 
        }catch(java.lang.Exception e){}
        
                      
        //display...        
        imp2_sum.setC(1);
        IJ.run(imp2_sum, "Blue", "");
        imp2_sum.setC(2);
        IJ.run(imp2_sum, "Green", "");
        imp2_sum.setC(3);
        IJ.run(imp2_sum, "Red", "");       
        imp2_sum.setDisplayMode(IJ.COMPOSITE);                        
        imp2_sum.setActiveChannels("111"); //edit to show channels 011
        
        //close images        
        imp_mask.close(); //close mask  
        imp2_max.close();        
    } 
            
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JCheckBox jCheckBox2;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JCheckBox jCheckBox4;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables
}
